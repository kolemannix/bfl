// We have to make GenericInstance a type of type, so that
// we do the right thing for them everywhere. In this case,
// instantiate_generic_type_subst is not respecting the fact that
// Opt[T] 'descends' from Opt, because it just sees an Enum. We could
// update it to special-case on when the type has a generic info, but we've already
// done that everywhere else, which strongly indicates that its better off as its own type kind.
// We can implement behavior that just passes through to the inner whenever appropriate without much inconvenience, I hope
//
// What i could do instead is double-down on the structural angle, and say look its an optional-like if it has
// an empty variant and a variant whose payload is exactly T, same for Array. This would mean 'methods' just work
// structurally 'if it typechecks' vs based on named identity. What about opaque generics? That has to be identity-based
// Which it would be because they are
fn main(): int {
  0
}
