fn as_digit(c: char): int? {
  val i_code = c.toInt();
  val ret = i_code >= 48 and i_code <= 57;
  if ret {
    i_code - 48
  } else {
    None
  }
}

fn main(): int {
  val input = Files::readToString("/Users/knix/dev/bfl/dogfood/aoc/1.txt");
  print("The file was ");
  printInt(input.length());
  println(" characters long");
  val digits: Array<Array<int>> = [];
  mut line = 0;
  mut first = true;
  for c in input do {
    val i_code = c.toInt();
    if c == '\n' {
      line = line + 1;
      first = true;
    };
    if as_digit(c) is Some(i) {
      if first {
        digits.push([i]);
        first = false;
      } else {
        digits[line].push(i);
      };
    };
  };
  mut sum = 0;
  for digits do {
    if it.first() is Some(fst) {
      if it.last() is Some(lst) {
        val two_digit = fst * 10 + lst;
        sum = sum + two_digit;
      };
    };
  };
  print("sum is ");
  printInt(sum);
  println("");
  0
}
