type Result<T, E> = enum Ok(T) | Err(E)
namespace Result {
  fn show(self: Result<int, string>): unit {
    when self {
      | .Ok(v) -> { print("Ok "); printInt(v); println("") }
      | .Err(e) -> { print("Error "); println(e); }
    }
  }
  fn show_ss(self: Result<string, string>): unit {
    when self {
      | .Ok(v) -> { print("Ok "); print(v); println("") }
      | .Err(e) -> { print("Error "); println(e); }
    }
  }
}

fn main(): int {
    val x1: Result<int, string> = .Ok(-3);
    val x2: Result<int, string> = .Err("Some error message");
    val x3: Result<string, string> = .Err("Some error message");

    x1.show();
    x2.show();
    x3.show_ss();

    when x1 {
        | .Ok(v) -> { print("x: Ok "); printInt(v); println("") }
        | .Err(e) -> { print("x: Error "); println(e); }
    };

    when x2 {
        | .Ok(v) -> { print("y: Ok "); printInt(v); println("") }
        | .Err(e) -> { print("y: Error "); println(e); }
    };
    0
}
