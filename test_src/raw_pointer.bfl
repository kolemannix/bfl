type Point = { x: int, y: int, z: int }

fn main(): int {
  val point: Point* = &{ x: 10, y: 20, z: 30 };
  val pointPtr: RawPointer = point.asRawPointer();

  val point2 = pointPtr.asUnsafe<Point>();
  assert(point2.x == 10);
  assert(point2.y == 20);

  // Move 8 bytes
  val pointShifted = RawPointer::fromIntUnsafe(pointPtr.toIntUnsafe() + 8);
  val point3 = pointShifted.asUnsafe<Point>();

  // x is now y, y is now z, z is now random bits
  assert(point3.x == 20);
  assert(point3.y == 30);
  printInt(point3.z);

  0
}
