fn last<T>(arr: Array<T>): T? {
  if arr.length() > 0 {
    arr[arr.length() - 1]
  } else None
}

fn first<T>(arr: Array<T>): T? {
  if arr.length() > 0 {
    arr[0]
  } else None
}

fn is_digit(c: char): bool {
  val i_code = c.toInt();
  // TODO: lte gte
  val ret = i_code > 47 and i_code < 58;
  ret
}

fn as_digit(c: char): int {
  val i_code = c.toInt();
  i_code - 48
}

val NEW_LINE: int = 10;

fn main(): int {
  val input = Files::readToString("/Users/knix/dev/bfl/aoc/1.txt");
  print("The file was ");
  printInt(input.length());
  println(" characters long");
  val digits: Array<Array<int>> = [];
  mut line = 0;
  mut first = true;
  mut i = 0;
  while i < input.length() {
    val c = input[i];
    val i_code = c.toInt();
    if i_code == NEW_LINE {
      line = line + 1;
      first = true;
    };
    if is_digit(c) {
      if first {
        digits.push([as_digit(c)]);
        first = false;
      } else {
        digits[line].push(as_digit(c));
      };
    };
    i = i + 1;
  };
  i = 0;
  mut sum = 0;
  while i < digits.length() {
//    val first: int? = first(digits[i]);
//    val last: int? = last(digits[i]);
    if first(digits[i]) |fst| {
      if last(digits[i]) |lst| {
        val two_digit = fst * 10 + lst;
        sum = sum + two_digit;
      }
    };
//    val two_digit = first! * 10 + last!;
//    sum = sum + two_digit;
    i = i + 1;
  };
  print("sum is ");
  printInt(sum);
  println("");
  0
}