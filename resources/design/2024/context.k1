type Loc = { file: string, line: u32 }

module Parser;

type alias opaque Symbols = Array<{ name: string, value: Ast }>
type Context = __struct_combine({ symbols: Symbols }, DefaultContext)


// Idea for vale-style safe pointers
// type TrackedAllocation =  {
//   ptr: Pointer, fingerprint: u64
// }

Scopes can have temporary allocators that free on close if they want?
Functions can have temporary allocators that free on close if they want?
  (like a dynamic call stack)


How do we call a function from another namespace if our context doesn't have
what its context needs?
a) pass only missing members explicitly

fn parse_expr(context: Context, caller_loc: Loc)(tokens: Array<Token>, index: int): Ast? {
  when tokens.first() {
    None -> None,
    Some(t) -> {
      if t == T.True new(Ast.True) else None
    }
  }
}

namespace end;
