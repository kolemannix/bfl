interface Show {
  fn show(self): String
}

fn main(args: Vec[String]): Program[i32] {
  val parse_num: Program[f32] = args[0].to_f32;

  // Once we use .run, we're agreeing to return a `Fail` if they fail, like Rusts ? or await
  val num: f32 = parse_num.run;
  val denom: f32 = args[1].toInt.run;

  val result: Program[ArithmeticError, f32] = divide(num, denom);
  val result: Program[f32] = result.catchError(arithmeticError => 1);

  val dividend: f32 = result.run;
  println("answer was {dividend}")
  0
}
