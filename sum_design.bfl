// Unqualified
// - Need to implement the tags
type Color = enum Red, Green, Blue, Custom(string) -> symbol (u64) // Layout: { tag: u64, payload: string }
type Y = enum Red, Green, Blue // Layout: { tag: u64 }

// BITFLAGS IDEA: just use 'flags' instead of 'enum'
type Flags = flags A, B, C, D;

fn asdf(): enum Red, Green, Blue, Custom(int) {
  val foo: .Red = .Red;
  val bar: asdf::return_type = .Custom(123);

  if random_bool() {
    bar
  } else {
    .Green
  }
}
// A recursive one
// type Nat = enum Zero | S(Nat*)